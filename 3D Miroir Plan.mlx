% Paramètres
num_rays = 10;  % Nombre de rayons
mirror_size = 5;  % Taille du miroir carré (à ajuster selon vos besoins)

% Coordonnées de la source ponctuelle
source_coords = [2, 2, 2];  % Coordonnées X, Y, Z

% Coordonnées du miroir (position arbitraire, taille mirror_size)
mirror_coords = [5, 5, 0];  % Coordonnées X, Y, Z

% Affichage de la source
scatter3(source_coords(1), source_coords(2), source_coords(3), 'r', 'filled');
hold on;

% Affichage du miroir
mirror_vertices = [mirror_coords(1), mirror_coords(2), mirror_coords(3);
                   mirror_coords(1) + mirror_size, mirror_coords(2), mirror_coords(3);
                   mirror_coords(1) + mirror_size, mirror_coords(2) + mirror_size, mirror_coords(3);
                   mirror_coords(1), mirror_coords(2) + mirror_size, mirror_coords(3);
                   mirror_coords(1), mirror_coords(2), mirror_coords(3)];
mirror_faces = [1 2 3 4 1];
patch('Faces', mirror_faces, 'Vertices', mirror_vertices, 'FaceColor', 'b', 'FaceAlpha', 0.5, 'EdgeColor', 'b', 'LineWidth', 2);

% Simulation des rayons
for i = 1:num_rays
    % Génération d'un point d'intersection aléatoire sur le miroir
    intersection_point = [mirror_coords(1) + rand() * mirror_size, ...
                           mirror_coords(2) + rand() * mirror_size, ...
                           mirror_coords(3)];

    % Tracé du rayon
    plot3([source_coords(1), intersection_point(1)], ...
          [source_coords(2), intersection_point(2)], ...
          [source_coords(3), intersection_point(3)], 'g');

    % Réflexion du rayon
    reflected_ray_direction = reflect(intersection_point - source_coords, [0, 0, 1]);  % Fonction à définir (voir ci-dessous)

    % Tracé du rayon réfléchi
    plot3([intersection_point(1), intersection_point(1) + reflected_ray_direction(1)], ...
          [intersection_point(2), intersection_point(2) + reflected_ray_direction(2)], ...
          [intersection_point(3), intersection_point(3) + reflected_ray_direction(3)], 'm');
end

% Réglages graphiques
axis equal;
xlabel('X');
ylabel('Y');
zlabel('Z');
title('Simulation 3D de tracé de rayons');

% Fonction pour calculer la réflexion d'un vecteur par rapport à une normale
function reflected_vector = reflect(incident_vector, normal_vector)
    % À implémenter en fonction de la formule de réflexion
    % La formule de réflexion pour un miroir parfait : R = I - 2 * dot(I, N) * N
    reflected_vector = incident_vector - 2 * dot(incident_vector, normal_vector) * normal_vector;
end
