% Définir les coordonnées du point source
source = [-10, 0, 0];

% Définir les propriétés de la demi-sphère concave
centreMiroir = [0, 0, 0];
rayonMiroir = 3; % Rayon de la demi-sphère concave
angleDebut = -pi/3; % Angle de début de la demi-sphère
angleFin = pi/3; % Angle de fin de la demi-sphère

% Tracer la demi-sphère concave
theta = linspace(angleDebut, angleFin, 50);
phi = linspace(-pi/2, pi/2, 25);
[theta, phi] = meshgrid(theta, phi);
xMiroir = centreMiroir(1) + rayonMiroir * cos(theta) .* cos(phi);
yMiroir = centreMiroir(2) + rayonMiroir * sin(theta) .* cos(phi);
zMiroir = centreMiroir(3) + rayonMiroir * sin(phi);

figure;
surf(xMiroir, yMiroir, zMiroir, 'FaceColor', 'b', 'EdgeColor', 'none', 'FaceAlpha', 0.5);
hold on;

% Tracer les rayons du point source à la demi-sphère concave, les rayons réfléchis
numRayons = 20;

for i = 1:numRayons
    % Coordonnées du point d'intersection avec la demi-sphère concave
    angleRayon = angleDebut + (i - 1) * (angleFin - angleDebut) / (numRayons - 1);
    xIntersection = centreMiroir(1) + rayonMiroir * cos(angleRayon);
    yIntersection = centreMiroir(2) + rayonMiroir * sin(angleRayon);
    
    % Assurer que certains rayons touchent le miroir à des coordonnées z négatives
    if mod(i, 2) == 0
        zIntersection = centreMiroir(3); % Coordonnée z négative
    else
        %zIntersection = centreMiroir(3); % Coordonnée z nulle
    end
    
    % Tracer le rayon incident
    plot3([source(1), xIntersection], [source(2), yIntersection], [source(3), zIntersection], 'b');
    
    % Calculer et tracer le rayon réfléchi
    normalMiroir = normalize([xIntersection - centreMiroir(1), yIntersection - centreMiroir(2), zIntersection - centreMiroir(3)]);
    directionIncidente = normalize([xIntersection - source(1), yIntersection - source(2), zIntersection - source(3)]);
    directionReflechie = directionIncidente - 2 * dot(directionIncidente, normalMiroir) * normalMiroir;
    
    % Coordonnées du point réfléchi sur la demi-sphère concave
    xReflechi = xIntersection + 2 * rayonMiroir * directionReflechie(1);
    yReflechi = yIntersection + 2 * rayonMiroir * directionReflechie(2);
    zReflechi = zIntersection + 2 * rayonMiroir * directionReflechie(3);
    
    % Tracer le rayon réfléchi
    plot3([xIntersection, xReflechi], [yIntersection, yReflechi], [zIntersection, zReflechi], 'r');
    
    % Tracer la normale locale au miroir (segment vert)
    quiver3(xIntersection, yIntersection, zIntersection, normalMiroir(1), normalMiroir(2), normalMiroir(3), 'g', 'LineWidth', 1, 'MaxHeadSize', 0.5);
end

% Marquer le point source
scatter3(source(1), source(2), source(3), 'filled', 'MarkerEdgeColor', 'g', 'MarkerFaceColor', 'g');

% Ajouter des étiquettes
title('Simulation du tracé des rayons sur une demi-sphère concave avec normales locales');
xlabel('Coordonnée X');
ylabel('Coordonnée Y');
zlabel('Coordonnée Z');
axis equal;
grid on;
hold off;
